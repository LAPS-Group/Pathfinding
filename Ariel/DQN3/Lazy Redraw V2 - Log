{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DQN Agent\n",
    "====\n",
    "Code taken from PyTorch DQN tutorial, then modified to work on our environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gym\n",
    "import gym_drone\n",
    "import math\n",
    "import random\n",
    "import time\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import namedtuple\n",
    "from itertools import count\n",
    "from PIL import Image\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "import torchvision.transforms as T\n",
    "\n",
    "# set up matplotlib\n",
    "is_ipython = 'inline' in matplotlib.get_backend()\n",
    "if is_ipython:\n",
    "    from IPython import display\n",
    "\n",
    "plt.ion()\n",
    "\n",
    "# if gpu is to be used\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "torch.cuda.empty_cache()\n",
    "#device = \"cpu\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Intialize environment along with the matplotlib figure.\n",
    "- DroneCardinal-v0 is the name of the environment to initialize\n",
    "- Rows and columns determine the shape of the environment area\n",
    "- Memory capacity says how many of the last steps shall be remembered and displayed when rendering with 'notebook' mode.\n",
    "- Ax takes a matplotlib plot, which it will plot to if given, otherwise plot to the default pyplot. This makes it so we can have the rendering of the playing as a matplotlib subplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([36,  0, 37, 21])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1008 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(nrows=2, ncols=2)\n",
    "fig.set_figwidth(30)\n",
    "fig.set_figheight(14)\n",
    "\n",
    "grid_shape = (40, 40)\n",
    "#grid_shape = (105, 105)\n",
    "env = gym.make('DroneCardinal-v0',\n",
    "               rows=grid_shape[0],\n",
    "               columns=grid_shape[1],\n",
    "               memory_capacity=50,\n",
    "               ax=ax[1][0]).unwrapped\n",
    "env.reset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, sys\n",
    "\n",
    "module_path = os.path.abspath(os.path.join('../..'))\n",
    "if module_path not in sys.path:\n",
    "    sys.path.append(module_path)\n",
    "\n",
    "import laps, redis, loader\n",
    "from Dijkstra.Dijkstra import *\n",
    "\n",
    "grid = env._grid\n",
    "\n",
    "grid = []\n",
    "width, height = grid_shape\n",
    "for x in range(width):\n",
    "    grid.append([])\n",
    "    for y in range(height):\n",
    "        grid[x].append(Node(env._grid[x, y], (x, y)))\n",
    "\n",
    "edges = get_edges(grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set up the ReplayMemory object type. \n",
    "\n",
    "It is how transitions in the environment is stored, and randomly given back with the sample function, to train the neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "Transition = namedtuple('Transition',\n",
    "                        ('state', 'action', 'next_state', 'reward'))\n",
    "\n",
    "\n",
    "class ReplayMemory(object):\n",
    "\n",
    "    def __init__(self, capacity):\n",
    "        self.capacity = capacity\n",
    "        self.memory = []\n",
    "        self.position = 0\n",
    "\n",
    "    def push(self, *args):\n",
    "        \"\"\"Saves a transition.\"\"\"\n",
    "        if len(self.memory) < self.capacity:\n",
    "            self.memory.append(None)\n",
    "        self.memory[self.position] = Transition(*args)\n",
    "        self.position = (self.position + 1) % self.capacity\n",
    "\n",
    "    def sample(self, batch_size):\n",
    "        return random.sample(self.memory, batch_size)\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.memory)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Network\n",
    "=======\n",
    "The network is a convolutional neural network, which uses ReLu activation function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DQN(nn.Module):\n",
    "\n",
    "    def __init__(self, h, w, outputs):\n",
    "        super(DQN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 16, kernel_size=5, stride=2)\n",
    "        self.bn1 = nn.BatchNorm2d(16)\n",
    "        #self.conv2 = nn.Conv2d(16, 32, kernel_size=4, stride=2)\n",
    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=5, stride=2)\n",
    "        self.bn2 = nn.BatchNorm2d(32)\n",
    "        self.conv3 = nn.Conv2d(32, 32, kernel_size=5, stride=2)\n",
    "        self.bn3 = nn.BatchNorm2d(32)\n",
    "\n",
    "        # Number of Linear input connections depends on output of conv2d layers\n",
    "        # and therefore the input image size, so compute it.\n",
    "        def conv2d_size_out(size, kernel_size = 5, stride = 2):\n",
    "            return (size - (kernel_size - 1) - 1) // stride  + 1\n",
    "        convw = conv2d_size_out(conv2d_size_out(conv2d_size_out(w)))\n",
    "        convh = conv2d_size_out(conv2d_size_out(conv2d_size_out(h)))\n",
    "        linear_input_size = convw * convh * 32\n",
    "        self.head = nn.Linear(linear_input_size, outputs)\n",
    "        #self.head = nn.Linear(24 * 24 * 32, outputs)\n",
    "\n",
    "    # Called with either one element to determine next action, or a batch\n",
    "    # during optimization. Returns tensor([[left0exp,right0exp]...]).\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.bn1(self.conv1(x)))\n",
    "        x = F.relu(self.bn2(self.conv2(x)))\n",
    "        x = F.relu(self.bn3(self.conv3(x)))\n",
    "        return self.head(x.view(x.size(0), -1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Resize the image to fit neural network, change order of channels to fit the expected PyTorch input type, and send image to device."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def blur_position(grid, position, blur_radius):\n",
    "    size_x, size_y = grid.shape\n",
    "    for d_x in range(blur_radius * 2 + 1):\n",
    "        d_x -= blur_radius\n",
    "        for d_y in range(blur_radius * 2 + 1):\n",
    "            d_y -= blur_radius\n",
    "            # If the distance to the point is greater than the\n",
    "            # distance to be blurred, skip this cell.\n",
    "            distance = abs(d_x) + abs(d_y)\n",
    "            if distance > blur_radius:\n",
    "                continue\n",
    "            x, y = position\n",
    "            x += d_x\n",
    "            y += d_y\n",
    "            # Check if index is inside grid\n",
    "            if x < 0 or x >= size_x or y < 0 or y >= size_y:\n",
    "                continue\n",
    "            grid[x, y] = 1 / (distance + 1)\n",
    "\n",
    "blur_radius = 10\n",
    "blur_arrays = np.zeros((grid_shape[0], grid_shape[1], grid_shape[0], grid_shape[1]))\n",
    "for y, array_row in enumerate(blur_arrays):\n",
    "    for x, array in enumerate(array_row):\n",
    "        blur_position(blur_arrays[y][x], (y, x), blur_radius)\n",
    "\n",
    "blur_tensors = torch.tensor(blur_arrays, dtype=torch.float64, device=device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "resize = T.Compose([T.ToPILImage(),\n",
    "                    #T.Resize(40, interpolation=Image.CUBIC),\n",
    "                    T.Resize(40),\n",
    "                    T.ToTensor()])\n",
    "\n",
    "screen = None\n",
    "white_channel = np.zeros(grid_shape)\n",
    "def get_screen(new_episode=False):\n",
    "    global screen\n",
    "    drone_pos = tuple(env._get_obs()[:2])\n",
    "    goal_pos = tuple(env._get_obs()[2:])\n",
    "    \n",
    "    if new_episode:\n",
    "        screen = env.render(mode='rgb_array')\n",
    "        \n",
    "        # ignore heightmap\n",
    "        #screen[:, :, 0] = white_channel\n",
    "        \n",
    "        screen = screen.transpose((2, 0, 1))\n",
    "        _, screen_height, screen_width = screen.shape\n",
    "        screen = np.ascontiguousarray(screen, dtype=np.float32) / 255\n",
    "        screen = torch.from_numpy(screen)\n",
    "        screen = screen.type(torch.FloatTensor)\n",
    "        screen = resize(screen).unsqueeze(0).to(device)\n",
    "    \n",
    "    # blur drone position\n",
    "    screen[0][1] = blur_tensors[drone_pos[0], drone_pos[1]]\n",
    "    # blur goal position\n",
    "    screen[0][2] = blur_tensors[goal_pos[0], goal_pos[1]]\n",
    "    \n",
    "    return screen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOcAAADnCAYAAADl9EEgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAHFElEQVR4nO3dwY7rRBAF0A4OSEis4R/4yvlK/oG3RkICQVhkh6sttyaOr3vOWTaZmvYzFytFud/t8Xg0IM93Z28AqAknhBJOCCWcEEo4IdR96x/ebrdVK3fpfLZa7322+qXvrDvyu3p/QK73vdf7in2l1v14PG7VZz05IZRwQijhhFDCCaE2G0IzfNl+ZyPD9Y7vYW/dGRqRW+sVT04IJZwQSjghlHBCKOGEUC/r1qZ2wq40onZU3RmuN7WLPFp3M3D/48kJoYQTQgknhBJOCDXcEEr+sn3EKJjr7X92hhHEhNHGHk9OCCWcEEo4IZRwQijhhFCb3drUTthRo2Bn7+uouqn7Gqmb2kXu1fCyNUxMOCGUcEIo4YRQX/L0vdR9HVU3dV8jdRMaVUddb48nJ4QSTgglnBBKOCGUcEKo6U/fS92X6x2re7WRPKfvwcSEE0IJJ4QSTgg11el7qc0F15t7+l7C9fZ4ckIo4YRQwgmhhBNCCSeEuuTpe6mdP9d7XN2rjeR52RomJpwQSjghlHBCqPjT91KbC6439/S9q11vjycnhBJOCCWcEEo4IVTMAV+pzQXXm1E3dV+vqNvjyQmhhBNCCSeEEk4IJZwQ6pTT987usM0wkjdSN7WLPFI3dV+vqNvjyQmhhBNCCSeEEk4IdegBXwlftmcdyRupm9qo6q2n7ssBX0BrTTghlnBCKOGEUMIJoWJetr7aaXRf7XrP/nOcoWu+VaPiyQmhhBNCCSeEEk4Idcr7nGfXTd3XUXUTGlVGELdrVDw5IZRwQijhhFDCCaGEE0Id+rJ1aoctdV9H1U0YUTOCuL1e8eSEUMIJoYQTQgknhHrZ+5xX+hKfuq+j6iaMqBlB3F6veHJCKOGEUMIJoYQTQgknhJr+9L3UfV1t9O3s673aSJ7T92BiwgmhhBNCCSeEmur0vdTmwtl1U/c1UvdqI3lO34OJCSeEEk4IJZwQSjgh1CVP30vt/KXWTd3XSN2rjeR52RomJpwQSjghlHBCqPjT91KbC1eqm7qvkbqp+3pF3R5PTgglnBBKOCGUcEKomAO+UpsLV5s2Sd2XKad+3R5PTgglnBBKOCGUcEIo4YRQp5y+d3aHLbWLPFr3K11v6r5eUbfHkxNCCSeEEk4IJZwQ6tADvhK+bF+pUdVbd70Z+3LAF9BaE06IJZwQSjghlHBCqJiXrZ2+16/heuf4vwRb6xVPTgglnBBKOCGUcEKoU97nPLtuQqPK9Y7tYYZGZK9ujycnhBJOCCWcEEo4IZRwQqjtl61/Wa8tv9efTe2EJXSRXe/cI4hO34MvRjghlHBCKOGEUNvje0V0l6JJ1FrdKEr4sn2lEbWj6i6tvmn3tr5pqdd7tZE873PCxIQTQgknhBJOCCWcEGq7W1u0lrodqwuN+qWOqL2m7vpG3Dv/Da4+uxQd3Nfsq5Y6gvjOf296PDkhlHBCKOGEUMIJoYYbQkNfikNH/WZpLuxt/iydCvW+6ptWNYpmGLlMGOXs8eSEUMIJoYQTQgknhNo+4Ov79dpLvmyfPE10teZC/33Mfc2fXkNobF/nThMlN+a8zwlfjHBCKOGEUMIJoYQTQm2P7/1QrPU+O1D87FG/5M7f2PuY+zqz91a03Yf3tfbOUb+ErvlR/970eHJCKOGEUMIJoYQTQm03hH4s1gYKJYz6pTYXPjuS11uvmj9LKzp73X3Vzh71u9pIngO+YGLCCaGEE0IJJ4QSTgi13a39af8PvLXD1hn1uxcNwYTO3xEjec8a+zqzSyva7u3do42fG/W72kie0/dgYsIJoYQTQgknhNo+fe/n9VrC6Fv3y/bOUb8ZRvKen93X/Fla0dlrKaON+0b9rjaS531OmJhwQijhhFDCCaGEE0Jtj+/9Wqz1PjtQ/K0dtqKBWo35dX+++7vOHcl7ru/rzN5b0XZvKaONVd39L2unjuTp1sLEhBNCCSeEEk4Itd0Q+ti31iuU8GW73NfAX/2QOpL3XN/X/Fla0dlr1xp969+Hz/3VDwnX2+PJCaGEE0IJJ4QSTgglnBBquFt7/63z2W/F2h+dX/pn8dm/OnX/Ltb+6dQt1pd/i7Xu+N51RvKedfd1Zpf20fld6/XU0bf+z19/1K/HkxNCCSeEEk4IJZwQavv0vaL5UzV+WqubP1Xjp7W6+VM1flqrmz9V46e1/c2f/mhVNQrW+2sEqp/v7Gvn2lF1ew2he1vf4KXVN3hp6xu8tPoG39v6Bi+tvsFLW9/Me7G2tOLmtrr5kzCS531OmJhwQijhhFDCCaGEE0Jtj+9daCSvtf2d2bHuZz0KVp8QN1K3dkRHsX+96xtcdWWf6+sbXHVln59d3+CqK/ussa8ze7WRPC9bw8SEE0IJJ4QSTgh1ezweZ+8BKHhyQijhhFDCCaGEE0IJJ4QSTgj1H9aTa6uN+qjBAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plt.imshow(np.swapaxes(np.swapaxes(np.squeeze(np.asarray(get_screen(True).cpu()), 0), 0, 2), 0, 1))\n",
    "test = get_screen(True)\n",
    "plt.imshow(np.swapaxes(np.swapaxes(np.squeeze(np.asarray(test.cpu()), 0), 0, 2), 0, 1))\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(env.render(mode='rgb_array'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "BATCH_SIZE = 128\n",
    "GAMMA = 0.9\n",
    "#GAMMA = 0.1\n",
    "EPS_START = 0.9\n",
    "EPS_END = 0.01\n",
    "#EPS_END = 0.0\n",
    "EPS_DECAY = 20 * 4000\n",
    "TARGET_UPDATE = 10\n",
    "\n",
    "# Get screen size so that we can initialize layers correctly based on shape\n",
    "# returned from AI gym. Typical dimensions at this point are close to 3x40x90\n",
    "# which is the result of a clamped and down-scaled render buffer in get_screen()\n",
    "init_screen = env.render(mode='rgb_array')\n",
    "screen_height, screen_width, _ = init_screen.shape\n",
    "\n",
    "# Get number of actions from gym action space\n",
    "n_actions = env.action_space.n\n",
    "\n",
    "policy_net = DQN(screen_height, screen_width, n_actions).to(device)\n",
    "target_net = DQN(screen_height, screen_width, n_actions).to(device)\n",
    "target_net.load_state_dict(policy_net.state_dict())\n",
    "target_net.eval()\n",
    "\n",
    "optimizer = optim.RMSprop(policy_net.parameters())\n",
    "memory = ReplayMemory(10000)\n",
    "\n",
    "# Reset these whenever \n",
    "episode_durations = []\n",
    "episode_rewards = []\n",
    "episode_best_reward = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "steps_done = 0\n",
    "def select_action(state):\n",
    "    global steps_done\n",
    "    sample = random.random()\n",
    "    eps_threshold = EPS_END + (EPS_START - EPS_END) * \\\n",
    "        math.exp(-1. * steps_done / EPS_DECAY)\n",
    "    steps_done += 1\n",
    "    if sample > eps_threshold:\n",
    "        with torch.no_grad():\n",
    "            # t.max(1) will return largest column value of each row.\n",
    "            # second column on max result is index of where max element was\n",
    "            # found, so we pick action with the larger expected reward.\n",
    "            state = get_screen()\n",
    "            policy_net.eval()\n",
    "            return policy_net(state).max(1)[1].view(1, 1)\n",
    "    else:\n",
    "        return torch.tensor([[random.randrange(n_actions)]], device=device, dtype=torch.long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "episode_durations = []\n",
    "episode_rewards = []\n",
    "episode_best_reward = []\n",
    "def plot_durations():\n",
    "    # Plot episode durations\n",
    "    ax[0][0].cla()\n",
    "    durations_t = torch.tensor(episode_durations, dtype=torch.float)\n",
    "    ax[0][0].set_xlabel('Episode')\n",
    "    ax[0][0].set_ylabel('Duration')\n",
    "    ax[0][0].plot(durations_t.numpy())\n",
    "    # Take 100 episode averages and plot them too\n",
    "    if len(durations_t) >= 100:\n",
    "        means = durations_t.unfold(0, 100, 1).mean(1).view(-1)\n",
    "        means = torch.cat((torch.zeros(99), means))\n",
    "        ax[0][0].plot(means.numpy())\n",
    "        \n",
    "    # Plot episode rewards\n",
    "    ax[0][1].cla()\n",
    "    rewards_t = torch.tensor(episode_rewards, dtype=torch.float)\n",
    "    best_rewards_t = torch.tensor(episode_best_reward, dtype=torch.float)\n",
    "    ax[0][1].set_xlabel('Episode')\n",
    "    ax[0][1].set_ylabel('Reward')\n",
    "    ax[0][1].plot(rewards_t.numpy())\n",
    "    ax[0][1].plot(best_rewards_t.numpy())\n",
    "    if len(rewards_t) >= 100:\n",
    "        means = rewards_t.unfold(0, 100, 1).mean(1).view(-1)\n",
    "        means = torch.cat((torch.zeros(99), means))\n",
    "        ax[0][1].plot(means.numpy())\n",
    "    \n",
    "    # Plot environment\n",
    "    env.render()\n",
    "\n",
    "    # Plot environment as seen by the agent\n",
    "    ax[1][1].imshow(np.swapaxes(np.swapaxes(np.squeeze(np.asarray(get_screen().cpu()), 0), 0, 2), 0, 1))\n",
    "    ax[1][1].axis('off')\n",
    "    \n",
    "    # pause a bit so that plots are updated\n",
    "    plt.pause(0.001)\n",
    "    if is_ipython:\n",
    "        display.clear_output(wait=True)\n",
    "        display.display(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def optimize_model():\n",
    "    if len(memory) < BATCH_SIZE:\n",
    "        return\n",
    "    transitions = memory.sample(BATCH_SIZE)\n",
    "    # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for\n",
    "    # detailed explanation). This converts batch-array of Transitions\n",
    "    # to Transition of batch-arrays.\n",
    "    batch = Transition(*zip(*transitions))\n",
    "\n",
    "    # Compute a mask of non-final states and concatenate the batch elements\n",
    "    # (a final state would've been the one after which simulation ended)\n",
    "    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None,\n",
    "                                            batch.next_state)), device=device, dtype=torch.bool)\n",
    "    non_final_next_states = torch.cat([s for s in batch.next_state\n",
    "                                       if s is not None])\n",
    "    state_batch = torch.cat(batch.state)\n",
    "    action_batch = torch.cat(batch.action)\n",
    "    reward_batch = torch.cat(batch.reward)\n",
    "\n",
    "    # Compute Q(s_t, a) - the model computes Q(s_t), then we select the\n",
    "    # columns of actions taken. These are the actions which would've been taken\n",
    "    # for each batch state according to policy_net\n",
    "    state_action_values = policy_net(state_batch).gather(1, action_batch)\n",
    "\n",
    "    # Compute V(s_{t+1}) for all next states.\n",
    "    # Expected values of actions for non_final_next_states are computed based\n",
    "    # on the \"older\" target_net; selecting their best reward with max(1)[0].\n",
    "    # This is merged based on the mask, such that we'll have either the expected\n",
    "    # state value or 0 in case the state was final.\n",
    "    next_state_values = torch.zeros(BATCH_SIZE, device=device)\n",
    "    next_state_values[non_final_mask] = target_net(non_final_next_states).max(1)[0].detach()\n",
    "    # Compute the expected Q values\n",
    "    expected_state_action_values = (next_state_values * GAMMA) + reward_batch\n",
    "\n",
    "    # Compute Huber loss\n",
    "    loss = F.smooth_l1_loss(state_action_values,\n",
    "                            expected_state_action_values.unsqueeze(1))\n",
    "\n",
    "    # Optimize the model\n",
    "    optimizer.zero_grad()\n",
    "    loss.backward()\n",
    "    for param in policy_net.parameters():\n",
    "        param.grad.data.clamp_(-1, 1)\n",
    "    optimizer.step()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reward Function:\n",
    "===\n",
    "Reward 1 for correct direction, -2 otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1008 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-78dfe7381ac3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m             \u001b[0mneighbour_nodes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoint\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mget_neighbours\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlast_x\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlast_y\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0mneighbour_nodes_cost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mget_cost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdijkstra\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0medges\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgoal_point\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mneighbour_nodes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m             \u001b[0mlowest_cost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneighbour_nodes_cost\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mchosen_cost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mneighbour_nodes_cost\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mneighbour_nodes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrone_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrone_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-14-78dfe7381ac3>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m             \u001b[0mneighbour_nodes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoint\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mget_neighbours\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlast_x\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlast_y\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0mneighbour_nodes_cost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mget_cost\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdijkstra\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0medges\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgoal_point\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mneighbour_nodes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m             \u001b[0mlowest_cost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneighbour_nodes_cost\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mchosen_cost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mneighbour_nodes_cost\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mneighbour_nodes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrone_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrone_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/workspace/Pathfinding/Dijkstra/Dijkstra.ipynb\u001b[0m in \u001b[0;36mdijkstra\u001b[0;34m(edges, f, t)\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "num_episodes = 20000000\n",
    "episode_durations = []\n",
    "episode_rewards = []\n",
    "episode_best_reward = []\n",
    "\n",
    "def lattice_distance(a, b):\n",
    "    a_x, a_y = a\n",
    "    b_x, b_y = b\n",
    "    return abs(a_x - b_x) + abs(a_y - b_y)\n",
    "\n",
    "possible_start_points = [(5,5), (grid_shape[0] - 5, 5), (5, grid_shape[1] - 5), (grid_shape[0] - 5, grid_shape[1] - 5)]\n",
    "for i_episode in range(num_episodes):\n",
    "    # Initialize the environment and state\n",
    "    env.reset()\n",
    "    \n",
    "    #env._goal_pos = (5, 5)\n",
    "    env._goal_pos = random.choice(possible_start_points)\n",
    "    mistakes = 0\n",
    "    total_height = 0\n",
    "    lowest_possible_cost = float('inf')\n",
    "    \n",
    "    current_screen = get_screen(True)\n",
    "    state = current_screen\n",
    "    total_reward = 0\n",
    "    highest_grid_value = np.amax(env._grid)\n",
    "\n",
    "    for t in count():\n",
    "        last_x, last_y, _, _ = env._get_obs()\n",
    "        \n",
    "        # Select and perform an action\n",
    "        action = select_action(state)\n",
    "        state_tuple, reward, done, _ = env.step(action.item())\n",
    "        drone_x, drone_y, goal_x, goal_y = state_tuple\n",
    "        drone_point = (drone_x, drone_y)\n",
    "        goal_point = (goal_x, goal_y)\n",
    "        \n",
    "        \n",
    "        \"\"\"\n",
    "        # Hijack reward calculation (temporary?)\n",
    "        if (drone_x, drone_y) == (goal_x, goal_y):\n",
    "            reward = np.float64(0)\n",
    "        else:\n",
    "            diff = abs(goal_x - drone_x) + abs(goal_y - drone_y)\n",
    "            last_diff = abs(goal_x - last_x) + abs(goal_y - last_y)\n",
    "            if (last_diff > diff):\n",
    "                reward = np.float64(1)\n",
    "            else:\n",
    "                reward = np.float64(0)\n",
    "        \"\"\"\n",
    "        \"\"\"\n",
    "        if (drone_x, drone_y) == (goal_x, goal_y):\n",
    "            reward = np.float64(0)\n",
    "        elif (last_x, last_y) == (drone_x, drone_y):\n",
    "            reward = np.float64(-1)\n",
    "        else:\n",
    "            reward = np.float64(-env._grid[drone_x][drone_y] - 1)\n",
    "        \"\"\"\n",
    "        # Hijack reward calculation (temporary?)\n",
    "        if (drone_x, drone_y) == (goal_x, goal_y):\n",
    "            reward = np.float64(0)\n",
    "        elif (last_x, last_y) == (drone_x, drone_y):\n",
    "            reward = np.float64(-1)\n",
    "        else:\n",
    "            neighbour_nodes = [i.point for i in get_neighbours(grid[last_x][last_y], grid)]\n",
    "            neighbour_nodes_cost = [get_cost(dijkstra(edges, i, goal_point)) for i in neighbour_nodes]\n",
    "            lowest_cost = min(neighbour_nodes_cost)\n",
    "            chosen_cost = neighbour_nodes_cost[neighbour_nodes.index((drone_x, drone_y))]\n",
    "            reward = np.float64(lowest_cost / chosen_cost)\n",
    "            if reward == 0.0:\n",
    "                reward += 0.001\n",
    "            if reward < 1:\n",
    "                #reward += 1\n",
    "                #reward *= -1\n",
    "                reward /= 4\n",
    "                reward = np.log(reward)\n",
    "        \n",
    "        \n",
    "        total_reward += reward\n",
    "        reward = torch.tensor([reward], device=device).type(torch.float)\n",
    "        \n",
    "        # Conditions for cutting of early\n",
    "        if t > 100 or lattice_distance(drone_point, goal_point) < 2:\n",
    "            done = True\n",
    "        \n",
    "        total_height += env._grid[drone_x][drone_y]\n",
    "        if total_height > lowest_possible_cost * 1.6:\n",
    "            done = True\n",
    "            \n",
    "        #if reward == 0:\n",
    "            #done = True\n",
    "            #mistakes += 1\n",
    "            #if mistakes >= 10:\n",
    "            #    done = True\n",
    "        \n",
    "        # Observe new state\n",
    "        last_screen = current_screen\n",
    "        current_screen = get_screen()\n",
    "        if not done:\n",
    "            next_state = current_screen\n",
    "        else:\n",
    "            next_state = None\n",
    "\n",
    "        # Store the transition in memory\n",
    "        memory.push(state, action, next_state, reward)\n",
    "\n",
    "        # Move to the next state\n",
    "        state = next_state\n",
    "\n",
    "        # Perform one step of the optimization (on the target network)\n",
    "        optimize_model()\n",
    "        \n",
    "        # Append max reward possible for graphing\n",
    "        if t == 0:\n",
    "            #episode_best_reward.append(abs(last_x - goal_x) + abs(last_y - goal_y))\n",
    "            \n",
    "            best_path = dijkstra(edges, (drone_x, drone_y), goal_point)\n",
    "            lowest_possible_cost = best_path[0]\n",
    "            \n",
    "            episode_best_reward.append(len(get_path(best_path)))\n",
    "\n",
    "        if done:\n",
    "            # The amount of steps the episode took\n",
    "            episode_durations.append(t + 1)\n",
    "            # Total reward gained divided by maximum, to get value between 0 and 1 of performance\n",
    "            #episode_rewards.append(max(total_reward - mistakes, 0) / episode_best_reward[-1])\n",
    "            episode_rewards.append(total_reward / episode_best_reward[-1])\n",
    "            episode_best_reward[-1] = 1\n",
    "            # Only plot graphs every hundreth episode for performance\n",
    "            if i_episode % 50 == 0:\n",
    "                plot_durations()\n",
    "            break\n",
    "\n",
    "    # Update the target network, copying all weights and biases in DQN\n",
    "    if i_episode % TARGET_UPDATE == 0:\n",
    "        target_net.load_state_dict(policy_net.state_dict())\n",
    "\n",
    "print('Complete')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([1.], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "test = torch.tensor([1], device=device).type(torch.float)\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "test[0] = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([2.], device='cuda:0')\n"
     ]
    }
   ],
   "source": [
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1820.0, ((36, 23), ((35, 23), ((34, 23), ((33, 23), ((32, 23), ((31, 23), ((30, 23), ((29, 23), ((28, 23), ((27, 23), ((26, 23), ((25, 23), ((24, 23), ((23, 23), ((22, 23), ((21, 23), ((20, 23), ((19, 23), ((18, 23), ((17, 23), ((16, 23), ((15, 23), ((14, 23), ((13, 23), ((12, 23), ((11, 23), ((10, 23), ((9, 23), ((8, 23), ((7, 23), ((6, 23), ((5, 23), ((4, 23), ((3, 23), ((2, 23), ((1, 23), ((1, 22), ((1, 21), ((1, 20), ((1, 19), ((1, 18), ((1, 17), ((1, 16), ((1, 15), ((1, 14), ((1, 13), ((1, 12), ((1, 11), ((1, 10), ((1, 9), ((1, 8), ((1, 7), ((1, 6), ((1, 5), ((1, 4), ((1, 3), ((1, 2), ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n"
     ]
    }
   ],
   "source": [
    "best_path = dijkstra(edges, (1, 2), (36, 23))\n",
    "print(best_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.141025641025635\n"
     ]
    }
   ],
   "source": [
    "total = 0\n",
    "for i in get_path(best_path)[1:-1]:\n",
    "    total += np.float64(1 - env._grid[i[0]][i[1]] / highest_grid_value)\n",
    "\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
